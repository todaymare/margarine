extern {
    fn push_list<T>(list: [T], value: T)
    fn pop_list<T>(list: [T]): Option<T>
    fn len_list<T>(list: [T]): int
}


impl<T> [T] {
    fn push(self, value: T) {
        push_list(self, value)
    }


    fn pop(self): Option<T> {
        pop_list(self)
    }


    fn len(self): int { len_list(self) }


    fn iter(self): ListIterator<T> {
        ListIterator {
            list: self,
            index: 0,
        }
    }

}


struct ListIterator<T> {
    list: [T],
    index: int,
}


impl<T> ListIterator<T> {
    fn __next__(self): Option<T> {
        if self.index < self.list.len() {
            self.index += 1;
            some(self.list[self.index-1])
        } else {
            none()
        }
    }
}


