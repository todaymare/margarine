use std::rand::random
use std::hashmap::HashMap
use std::print
use raylib::*

fn main() {
    var raylib = Raylib::new(600, 400, "flappy bird");
    raylib.set_target_fps(60);

    var bird = Bird {
        position: (300.0, 200.0),
        velocity: (0.0, 0.0),
    };

   var pipe = Pipe {
        position: (300.0, 200.0),
        velocity: (0.0, 0.0),
    };

    var objs = [];

    objs.push((
        |raylib, dt| bird.update(raylib, dt),
        |frame| bird.draw(frame),
    ));

    objs.push((
        |_, dt| pipe.update(dt),
        |frame| pipe.draw(frame),
    ));


    var x = std::iter::Iter {
        next: || some(5)
    };

    var map = HashMap::new();
    map.insert(50, 30);
    print(map);

    while !raylib.window_should_close() {
        var it = [10, 20, 30].iter().enumerate();

        for i in it {
            print(i);
        }

        var dt = raylib.frame_time();

        for obj in objs.iter().enumerate() {
            print(obj.0);
            var func = (obj.1).0;
            func(raylib, dt);
        }


        raylib.frame(
        |frame: Frame| {
            frame.clear_background(Color::new(0.1, 0.1, 0.1, 1.0));

            for obj in objs.iter() {
                var func = obj.1;
                func(frame);
            }

            frame.draw_fps(0, 0);

        });
    }
}


struct Bird {
    position: (x: float, y: float),
    velocity: (float, float),
}


impl Bird {
    fn update(self, raylib: Raylib, dt: float) {
        self.velocity.1 += 270.8 * dt;
        if raylib.is_key_pressed(Key::Space()) {
            std::print("hi");
            self.velocity.1 = -180.0;
        }

        self.position.y += self.velocity.1 * dt;
    }


    fn draw(self, frame: Frame) {
        frame.draw_rect(
            self.position.x as int - 8,
            self.position.y as int - 8,
            16, 16, Color::new(1.0, 1.0, 1.0, 1.0),
        );
    }
}


struct Pipe {
    position: (x: float, y: float),
    velocity: (float, float),
}


impl Pipe {
    fn update(self, dt: float) {
        self.position.x += -180.0 * dt;

        if self.position.x < -8.0 {
            self.position.x = 608.0;
            self.position.y = random() * 380.0 + 10.0;
        }
    }


    fn draw(self, frame: Frame) {
        var gap = 30;
        frame.draw_rect(
            self.position.x as int - 8,
            self.position.y as int - 360 - gap,
            16, 360, Color::new(1.0, 0.0, 1.0, 1.0),
        );
        frame.draw_rect(
            self.position.x as int - 8,
            self.position.y as int + gap,
            16, 360, Color::new(1.0, 1.0, 1.0, 1.0),
        );
    }
}
